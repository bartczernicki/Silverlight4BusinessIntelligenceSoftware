//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

	public class SampleDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/CrossTab;component/SampleData/SampleDataSource/SampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private ItemCollection _Collection = new ItemCollection();

		public ItemCollection Collection
		{
			get
			{
				return this._Collection;
			}
		}

		private DomainInfo _DomainInfo = new DomainInfo();

		public DomainInfo DomainInfo
		{
			get
			{
				return this._DomainInfo;
			}
		}
	}

	public class ItemCollection : System.Collections.ObjectModel.ObservableCollection<Item>
	{ 
	}

	public class Item : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Prod1 _Prod1 = new Prod1();

		public Prod1 Prod1
		{
			get
			{
				return this._Prod1;
			}
		}

		private string _Product = string.Empty;

		public string Product
		{
			get
			{
				return this._Product;
			}

			set
			{
				if (this._Product != value)
				{
					this._Product = value;
					this.OnPropertyChanged("Product");
				}
			}
		}

		private string _PRR1NorthEastSales = string.Empty;

		public string PRR1NorthEastSales
		{
			get
			{
				return this._PRR1NorthEastSales;
			}

			set
			{
				if (this._PRR1NorthEastSales != value)
				{
					this._PRR1NorthEastSales = value;
					this.OnPropertyChanged("PRR1NorthEastSales");
				}
			}
		}

		private string _PRR2NorthWestSales = string.Empty;

		public string PRR2NorthWestSales
		{
			get
			{
				return this._PRR2NorthWestSales;
			}

			set
			{
				if (this._PRR2NorthWestSales != value)
				{
					this._PRR2NorthWestSales = value;
					this.OnPropertyChanged("PRR2NorthWestSales");
				}
			}
		}

		private string _PRR3SouthEastSales = string.Empty;

		public string PRR3SouthEastSales
		{
			get
			{
				return this._PRR3SouthEastSales;
			}

			set
			{
				if (this._PRR3SouthEastSales != value)
				{
					this._PRR3SouthEastSales = value;
					this.OnPropertyChanged("PRR3SouthEastSales");
				}
			}
		}

		private string _PRR4SouthWestSales = string.Empty;

		public string PRR4SouthWestSales
		{
			get
			{
				return this._PRR4SouthWestSales;
			}

			set
			{
				if (this._PRR4SouthWestSales != value)
				{
					this._PRR4SouthWestSales = value;
					this.OnPropertyChanged("PRR4SouthWestSales");
				}
			}
		}
	}

	public class Prod1 : System.Collections.ObjectModel.ObservableCollection<Prod1Item>
	{ 
	}

	public class Prod1Item : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Date = string.Empty;

		public string Date
		{
			get
			{
				return this._Date;
			}

			set
			{
				if (this._Date != value)
				{
					this._Date = value;
					this.OnPropertyChanged("Date");
				}
			}
		}

		private double _NumberOfHits = 0;

		public double NumberOfHits
		{
			get
			{
				return this._NumberOfHits;
			}

			set
			{
				if (this._NumberOfHits != value)
				{
					this._NumberOfHits = value;
					this.OnPropertyChanged("NumberOfHits");
				}
			}
		}
	}

	public class DomainInfoItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _DomainName = string.Empty;

		public string DomainName
		{
			get
			{
				return this._DomainName;
			}

			set
			{
				if (this._DomainName != value)
				{
					this._DomainName = value;
					this.OnPropertyChanged("DomainName");
				}
			}
		}

		private double _USARegion = 0;

		public double USARegion
		{
			get
			{
				return this._USARegion;
			}

			set
			{
				if (this._USARegion != value)
				{
					this._USARegion = value;
					this.OnPropertyChanged("USARegion");
				}
			}
		}

		private double _EuropeRegion = 0;

		public double EuropeRegion
		{
			get
			{
				return this._EuropeRegion;
			}

			set
			{
				if (this._EuropeRegion != value)
				{
					this._EuropeRegion = value;
					this.OnPropertyChanged("EuropeRegion");
				}
			}
		}

		private double _OtherRegion = 0;

		public double OtherRegion
		{
			get
			{
				return this._OtherRegion;
			}

			set
			{
				if (this._OtherRegion != value)
				{
					this._OtherRegion = value;
					this.OnPropertyChanged("OtherRegion");
				}
			}
		}
	}

	public class DomainInfo : System.Collections.ObjectModel.ObservableCollection<DomainInfoItem>
	{ 
	}
#endif
}
